package commands

import (
	"Bringy/services/database"
	"Bringy/services/helpful"
	"context"
	"fmt"
	"log"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func Launch(ctx context.Context, b *bot.Bot, upd *models.Update) {
	group, err := database.DB.GetGroupParams(upd.Message.Chat.ID)
	if err != nil {
		log.Printf("[ERROR] looking for a group in launch. Group ID: %d. Error: %v", upd.Message.Chat.ID, err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "–ü—Ä–∏ –ø–æ–∏—Å–∫–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
		})
		return
	}

	var found bool
	var foundThread database.GroupThread
	for _, thread := range group.Threads {
		if thread.ThreadID == upd.Message.MessageThreadID {
			found = true
			foundThread = thread
			break
		}
	}

	if foundThread.Active {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      fmt.Sprintf("–Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ\n\nüëÄ <a href=\"https://t.me/c/%d/%d\">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–¥–∫—É</a>\n\n–ß—Ç–æ-—Ç–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ /launch", helpful.InternalGroupID(upd.Message.Chat.ID), foundThread.PinnedMessageID),
		})
		return
	}

	msg, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:          upd.Message.Chat.ID,
		MessageThreadID: upd.Message.MessageThreadID,
		ParseMode:       "HTML",
		Text:            "<i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏</i>",
	})
	if err != nil {
		log.Printf("[ERROR] sending a message for summarizations. Error: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
		})
		return
	}
	_, err = b.PinChatMessage(ctx, &bot.PinChatMessageParams{
		ChatID:              upd.Message.Chat.ID,
		MessageID:           msg.ID,
		DisableNotification: true,
	})
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
		})
	}

	err = database.DB.PutActiveThreadIntoDB(upd.Message.Chat.ID, msg.ID, upd.Message.MessageThreadID, found)
	if err != nil {
		log.Printf("[ERROR] putting an active thread into DB. Error: %v", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑",
		})
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: upd.Message.Chat.ID,
		ReplyParameters: &models.ReplyParameters{
			MessageID:                upd.Message.ID,
			AllowSendingWithoutReply: true,
		},
		ParseMode: "HTML",
		Text:      "‚úÖ",
	})

	if group.GeminiToken == "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "–¢–æ–∫–µ–Ω Gemini –µ—â—ë –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –ë–µ–∑ –Ω–µ–≥–æ —è –Ω–µ —Å–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /set_gemini_token",
		})
	}
}
