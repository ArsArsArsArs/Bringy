package commands

import (
	"Bringy/services/database"
	"Bringy/services/gemini"
	"Bringy/services/helpful"
	"context"
	"log"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var tokenSettersMap map[int64]int64

func SetGeminiToken(ctx context.Context, b *bot.Bot, upd *models.Update) {
	if tokenSettersMap == nil {
		tokenSettersMap = make(map[int64]int64)
	}

	if upd.Message.Chat.Type == models.ChatTypeGroup {
		if can := helpful.CanChangeInfo(upd.Message.Chat.ID, upd.Message.From.ID, b); !can {
			return
		}
		tokenSettersMap[upd.Message.From.ID] = upd.Message.Chat.ID

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: upd.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				MessageID:                upd.Message.ID,
				AllowSendingWithoutReply: true,
			},
			ParseMode: "HTML",
			Text:      "‚ùì <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω Gemini?</b>\n–ú—ã –ø–æ–±—É–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ò–ò –º–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫. –ß–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å Gemini, —Ç–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞–∂–µ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n\n‚ùì <b>–ù–æ –≥–¥–µ –º–Ω–µ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å?</b>\n–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å: https://ai.google.dev/gemini-api/docs/api-key\n\n‚ùì <b>–¢–æ–∫–µ–Ω —É –º–µ–Ω—è, —á—Ç–æ –¥–∞–ª—å—à–µ?</b>\n–Ø –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤ –õ–° —ç—Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É, –∞ –∑–∞—Ç–µ–º —Ç—É–¥–∞ –∂–µ - —Ç–æ–∫–µ–Ω. –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å",
		})
	} else if upd.Message.Chat.Type == models.ChatTypePrivate {
		groupID, ok := tokenSettersMap[upd.Message.From.ID]
		if !ok {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: upd.Message.Chat.ID,
				ReplyParameters: &models.ReplyParameters{
					MessageID:                upd.Message.ID,
					AllowSendingWithoutReply: true,
				},
				ParseMode: "HTML",
				Text:      "–°–Ω–∞—á–∞–ª–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–º —á–∞—Ç–µ",
			})
			return
		}

		if can := helpful.CanChangeInfo(groupID, upd.Message.From.ID, b); !can {
			return
		}

		splitMsg := strings.Split(upd.Message.Text, " ")
		if len(splitMsg) < 2 {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: upd.Message.Chat.ID,
				ReplyParameters: &models.ReplyParameters{
					MessageID:                upd.Message.ID,
					AllowSendingWithoutReply: true,
				},
				ParseMode: "HTML",
				Text:      "–ú—ã –±–ª–∏–∑–∫–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∞ –∫–æ–º–∞–Ω–¥—É —Å —Ç–æ–∫–µ–Ω–æ–º. –ö–∞–∫-—Ç–æ –≤–æ—Ç —Ç–∞–∫:\n<code>/set_gemini_token 3fgv23d94v...</code>",
			})
			return
		}

		token := splitMsg[1]

		if ok := gemini.ClientManager.CheckAvailability(token); !ok {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: upd.Message.Chat.ID,
				ReplyParameters: &models.ReplyParameters{
					MessageID:                upd.Message.ID,
					AllowSendingWithoutReply: true,
				},
				ParseMode: "HTML",
				Text:      "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö Gemini: https://ai.google.dev/gemini-api/docs/api-key",
			})
			return
		}

		err := database.DB.SaveGeminiToken(upd.Message.Chat.ID, token)
		if err != nil {
			log.Printf("[ERROR] saving a gemini token. Error: %v", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: upd.Message.Chat.ID,
				ReplyParameters: &models.ReplyParameters{
					MessageID:                upd.Message.ID,
					AllowSendingWithoutReply: true,
				},
				ParseMode: "HTML",
				Text:      "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
			})
			return
		}

		b.SetMessageReaction(ctx, &bot.SetMessageReactionParams{
			ChatID:    upd.Message.Chat.ID,
			MessageID: upd.Message.ID,
			Reaction: []models.ReactionType{
				{
					Type: models.ReactionTypeTypeEmoji,
					ReactionTypeEmoji: &models.ReactionTypeEmoji{
						Type:  "emoji",
						Emoji: "üëç",
					},
				},
			},
		})
	}
}
